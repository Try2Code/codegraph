#!/usr/bin/env ruby
# Which options are availabile ------------------------------------------------
# Default settings
  $options = {
    :filelist => [],
    :mode     => nil,
    :function => "",
    :depth    => nil,
    :adds     => [],
    :excludes => [],
    :debug    => false
  }

require "codegraph"
require "optparse"

def parse(args)
  OptionParser.new do |opts|
    opts.banner = "Usage: codegraph [options]"
    opts.on("-d", "--debug","Work in debuging mode") do
      $options[:debug] = true
    end
    opts.on( "-a","--add f1,f2,f3",Array,"Add function for scanning") do |adds|
      $options[:adds] = adds
    end
    opts.on( "-x","--exclude f1,f2,f3",Array,"Exclude function from scanning") do |excludes|
      $options[:excludes] = excludes
    end
    opts.on("-f", "--function FUNCTION") do |func|
      $options[:function] = func
      $options[:mode] = 'single'
    end
    opts.on("-u", "--upper-funx FUNCTION") do |func|
      $options[:function] = func
      $options[:mode] = 'upper'
    end
    opts.on("-C", "--ctags-opts KIND",String) do |opts|
      $options[:ctagsopts] = opts
    end
    opts.on("--match-before REGEXP",String) do |regexp|
      $options[:matchBefore] = regexp
    end
    opts.on("--match-after REGEXP",String) do |regexp|
      $options[:matchAfter] = regexp
    end
    opts.on("-F", "--file-list file0,file1,file3", Array,"List of files (alternative \"file0 file1 file3\")") do |filelist|
      filelist.each do |filedesc|
        unless File.exist?(filedesc)
          $options[:filelist] << Dir.glob(File.expand_path(filedesc))
        else
          $options[:filelist] = filelist
        end
      end
      $options[:filelist].flatten!
    end
    opts.on("-o", "--output FILE", "Write image output file (supported formats: ps,png,jpw,svg,..., see 'man dot')") do |ofile|
      $options[:otype] = File.extname(ofile)[1..-1]
      $options[:ofile] = ofile[0..(-$options[:otype].size-2)]
    end
    opts.on("-V", "--version","Print version") do 
      puts Codegraph::VERSION
      exit
    end
    opts.on_tail("-h", "--help","Showthis message") do
      puts opts
      exit
    end
  end.parse(args)

  if $options[:filelist].flatten.empty?
    warn 'Please use -F do define input files! Use -h for further help.'
    exit -1
  end
  unless $options[:otype]
    warn 'Please provide an output filename.'
    exit -1
  end
  $options
end
options = parse(ARGV)
pp options if $options[:debug]

# What kind of graph should be generated?
case $options[:mode]
when "upper"
   g = UpperFunctionGraph.new($options)
when "single"
   g = SingleFunctionGraph.new($options)
else
   g = FunctionGraph.new($options)
   g.scan
end

# What sort of output should be created?
puts "Save graph to #{[$options[:ofile],$options[:otype]].join('.')}...." if $options[:debug]
g.save($options[:ofile],$options[:otype])
